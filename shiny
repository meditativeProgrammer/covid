#################
# LOAD PACKAGES #
#################
library(shiny)
library(leaflet)
library(RColorBrewer)
library(shinythemes)
library(ggplot2)
library(lubridate)
library(dplyr)
library(shinyWidgets)
library(shinydashboard)
library(DT)
library(maptools)
library(rgdal)
library(dplyr)
library(tigris)
library(countrycode)
library(readr)

############
# GET DATA #
############

data <-
  read.csv("https://covid.ourworldindata.org/data/ecdc/full_data.csv",
           header = TRUE)
data$date <- as.Date(data$date, format = "%Y-%m-%d")
todaydate = max(as.Date((data$date)))
startdate = "2020-03-01" #input it manually ~a month previous
options(scipen = 999)
data$code <-
  countrycode(data$location, origin = 'country.name', destination = 'iso3c') # Convert country name to country code

world_spdf <- readOGR( #import spatial files
  dsn = paste0(getwd(), "/DATA/world_shape_file/") ,
  layer = "TM_WORLD_BORDERS_SIMPL-0.3",
  verbose = FALSE
)

dataToday <- subset(data, date == todaydate)

world_sf_merged <- geo_join(world_spdf, dataToday, "ISO3", "code")

popup_sb <-
  paste0(
    "<center>",
    "<strong>",
    "<code>",
    world_sf_merged$location,
    "</code>",
    "</strong>",
    "</center>",
    br(),
    "Total: ",
    "<strong>",
    format(
      world_sf_merged$total_cases,
      big.mark = ",",
      scientific = FALSE
    ),
    "</strong>",
    "<br/>",
    "Deaths: ",
    "<strong>",
    format(
      world_sf_merged$total_deaths,
      big.mark = ",",
      scientific = FALSE
    ),
    "</strong>",
    "<br/>",
    "New Cases: ",
    "<strong>",
    format(
      world_sf_merged$new_cases,
      big.mark = ",",
      scientific = FALSE
    ),
    "</strong>",
    "<br/>",
    "New Deaths: ",
    "<strong>",
    format(
      world_sf_merged$new_deaths,
      big.mark = ",",
      scientific = FALSE
    ),
    "</strong>"
  )

##################
# GGPLOT WRITING #
##################

themeGG <- theme(
  plot.background = element_rect(fill = "white"),
  plot.title = element_text(
    size = 25,
    family = "Avenir",
    color = 'black',
    hjust = 0.5,
    lineheight = 1.2
  ),
  axis.title.y = element_text(
    size = 15,
    family = "Avenir",
    color = "black"
  ),
  axis.title.x = element_text(
    size = 15,
    color = "black",
    family = "Avenir"
  ),
  axis.text.y = element_text(
    size = 10,
    family = "Avenir",
    color = "black"
  )
)

########################
# COLOR PALETTE GGPLOT #
########################

palC <-
  colorNumeric("YlOrBr",
               domain = world_sf_merged@data$total_cases,
               na.color = "transparent")
palD <-
  colorNumeric("YlOrBr",
               domain = world_sf_merged@data$total_deaths,
               na.color = "transparent")

palNC <-
  colorNumeric("YlOrBr",
               domain = world_sf_merged@data$new_cases,
               na.color = "transparent")

#############
# START UI #
############
ui <- shinyUI(navbarPage(
  theme = shinytheme("flatly"),
  "COVID-19",
  tabPanel("World Dashboard",
           div(class = "outer",
               fluidPage(fluidRow(
                 column(
                   12,
                   h3("Coronavirus COVID-19 Dashboard"),
                   align = 'center',
                   br(),
                   fluidRow(
                     column(
                       2,
                       "",
                       fluidRow(column(
                         12,
                         h5("Total Cases:", align = "center"),
                         h1(textOutput("worldCase"), align = "center"),
                       )),
                       fluidRow(column(
                         12,
                         div(style = 'height: 220px; overflow-y: scroll',
                             dataTableOutput("totalCasesTable"))
                       )),
                       fluidRow(column(
                         12,
                         hr(),
                         radioButtons(
                           "radio",
                           label = "Statistic:",
                           choices = c("Cases", "Deaths", "New Cases"),
                           inline = TRUE
                         ),
                         selectInput(
                           "country",
                           "Country:",
                           choices =
                             data$location,
                           selected =
                             data$location == "World"
                         ),
                         hr(),
                       )),
                       fluidRow(column(
                         12,
                         h6("Last Updated:", todaydate, ' at 5am EST'),
                         h6(
                           "Source:",
                           tags$a(href = "https://ourworldindata.org/coronavirus-source-data", "WHO")
                         )
                       ))
                     ),
                     column(6,
                            leafletOutput("map",
                                          height = 711)),
                     column(4,
                            "",
                            fluidRow(
                              column(
                                6,
                                h5("Total Deaths:", align = "center"),
                                h1(textOutput("worldDeath"), align = "center"),
                                div(style = 'height: 204px; overflow-y: scroll',
                                    dataTableOutput("totalDeathsTable"))
                              ),
                              column(
                                6,
                                h5("New Cases (Previous 24hours):", align = "center"),
                                h1(textOutput("newCases"), align = "center"),
                                div(style = 'height: 204px; overflow-y: scroll;',
                                    dataTableOutput("totalNewCasesTable"))
                              )
                            ),
                            hr(),
                            fluidRow(column(
                              12,
                              plotOutput("plot1"),
                              dateRangeInput(
                                "dateRange",
                                label = "Filter Date Range (Plot):",
                                min = min(data$date),
                                max = max(data$date),
                                start = startdate,
                                end = max(data$date)
                              )
                            )))
                     
                   )
                 )
               )))),
  tabPanel("Canada Dashboard"),
  tabPanel(
    "Credits",
    tags$h3("Created by Elijah Silva", align = "center"),
    tags$h4("Biostatician/Epidemiologist", align = "center"),
    tags$h4("Master of Science in Global Health", align = "center"),
    tags$h4(
      a(href = "https://www.linkedin.com/in/elijahsilva/", "LinkedIn"),
      align = "center"
    )
  )
))


#################
# SSTART SERVER #
#################

server <- function(input, output, session) {
  location <- data$location
  dates <- format(data$date, "%Y-%m-%d")
  total_cases <- data$total_cases
  total_deaths <- data$total_deaths
  new_cases <- data$new_cases
  
  df <-
    data.frame(dates, location, total_cases, total_deaths, new_cases)
  
  
  ##############
  # DATATABLES #
  ##############
  
  # Total Cases Table
  df_totalCases <- reactive({
    data %>%
      select(location, total_cases) %>%
      subset(as.Date(dates) == todaydate) %>%
      subset(location != "World") %>%
      arrange(desc(total_cases)) %>%
      format(data$total_cases,
             big.mark = ",",
             scientific = FALSE)
  })
  output$totalCasesTable <- renderDataTable({
    datatable(
      df_totalCases(),
      colnames = "",
      class = "compact",
      options = list(
        dom = 't',
        ordering = F,
        scrollX = TRUE,
        pageLength = 200
      ),
      rownames = FALSE,
      selection = "single",
    )
  })
  
  # Total Deaths Table
  df_totalDeaths <- reactive({
    data %>%
      select(location, total_deaths) %>%
      subset(as.Date(dates) == todaydate) %>%
      subset(location != "World") %>%
      arrange(desc(total_deaths)) %>%
      format(data$total_cases,
             big.mark = ",",
             scientific = FALSE)
  })
  output$totalDeathsTable <- renderDataTable({
    datatable(
      df_totalDeaths(),
      colnames = "",
      class = "compact",
      options = list(
        dom = 't',
        ordering = F,
        scrollX = TRUE,
        pageLength = 200
      ),
      rownames = FALSE,
      selection = "single"
    )
  })
  
  # Total New Cases Table
  df_totalNewCases <- reactive({
    data %>%
      select(location, new_cases) %>%
      subset(as.Date(dates) == todaydate) %>%
      subset(location != "World") %>%
      arrange(desc(new_cases)) %>%
      format(data$total_cases,
             big.mark = ",",
             scientific = FALSE)
  })
  output$totalNewCasesTable <- renderDataTable({
    datatable(
      df_totalNewCases(),
      class = "compact",
      colnames = "",
      options = list(
        dom = 't',
        ordering = F,
        scrollX = TRUE,
        pageLength = 200
      ),
      rownames = FALSE,
      selection = "single"
    )
  })
  
  #########################
  # TEXT ABOVE DATATABELS #
  #########################
  
  df_world <- reactive({
    subset(data, location == "World" &
             as.Date(dates) == todaydate)
  })
  
  output$worldCase <- renderText({
    df1 <- df_world()$total_cases
    format(df1, big.mark = ",", scientific = FALSE)
  })
  
  output$worldDeath <- renderText({
    df2 <- df_world()$total_deaths
    format(df2, big.mark = ",", scientific = FALSE)
  })
  
  output$newCases <- renderText({
    df3 <- df_world()$new_cases
    format(df3, big.mark = ",", scientific = FALSE)
  })
  
  
  ############
  # PLOTTING #
  ############
  
  df_subset <- reactive({
    subset(
      df,
      location == input$country &
        as.Date(dates) >= input$dateRange[1] &
        as.Date(dates) <= input$dateRange[2]
    )
  })
  
  observe({
    if (input$radio == "Cases") {
      output$plot1 <- renderPlot({
        ggplot(data = df_subset(), aes(x = as.Date(dates))) +
          geom_line(aes(y = total_cases),
                    color = 'darkred',
                    group = 5) +
          theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
          scale_x_date() +
          themeGG +
          labs(title = "Cases",
               y = "Number of Cases",
               x = "Date")
      })
    }
    if (input$radio == "Deaths") {
      output$plot1 <- renderPlot({
        ggplot(data = df_subset(), aes(x = as.Date(dates))) +
          geom_line(aes(y = total_deaths),
                    color = 'steelblue',
                    group = 5) +
          theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
          scale_x_date() +
          labs(title = "Deaths",
               y = "Number of Deaths",
               x = "Date") +
          themeGG
        
      })
    }
    if (input$radio == "New Cases") {
      output$plot1 <- renderPlot({
        ggplot(data = df_subset(), aes(x = as.Date(dates), y = new_cases)) +
          geom_bar(stat = "identity") +
          theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
          scale_x_date() +
          labs(title = "New Cases",
               y = "Number of New Cases",
               x = "Date") +
          themeGG
      })
    }
  })
  
  ###########
  # LEAFLET #
  ###########
  
  observe({
    if (input$radio == "Cases") {
      output$map <- renderLeaflet({
        leaflet() %>%
          addProviderTiles("CartoDB.Positron") %>%
          addPolygons(
            data = world_sf_merged ,
            fillColor = ~ palC(world_sf_merged$total_cases),
            fillOpacity = 0.7,
            weight = 0.2,
            smoothFactor = 0.2,
            popup = ~ popup_sb
          ) %>%
          addLegend(
            pal = palC,
            values = world_sf_merged$total_cases,
            position = "bottomright",
            title = "Total Cases"
          )
      })
    }
    if (input$radio == "Deaths") {
      output$map <- renderLeaflet({
        leaflet() %>%
          clearControls() %>%
          addProviderTiles("CartoDB.Positron") %>%
          addPolygons(
            data = world_sf_merged ,
            fillColor = ~ palD(world_sf_merged$total_deaths),
            fillOpacity = 0.7,
            weight = 0.2,
            smoothFactor = 0.2,
            popup = ~ popup_sb
          ) %>%
          addLegend(
            pal = palD,
            values = world_sf_merged$total_deaths,
            position = "bottomright",
            title = "Total Deaths"
          )
      })
    }
    if (input$radio == "New Cases") {
      output$map <- renderLeaflet({
        leaflet() %>%
          clearControls() %>%
          addProviderTiles("CartoDB.Positron") %>%
          addPolygons(
            data = world_sf_merged ,
            fillColor = ~ palNC(world_sf_merged$new_cases),
            fillOpacity = 0.7,
            weight = 0.2,
            smoothFactor = 0.2,
            popup = ~ popup_sb
          ) %>%
          addLegend(
            pal = palNC,
            values = world_sf_merged$new_cases,
            position = "bottomright",
            title = "New Cases"
          )
      })
    }
    
  })
}

# Run the application
shinyApp(ui = ui, server = server)
